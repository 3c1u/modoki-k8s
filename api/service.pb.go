// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package modoki is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	ServiceSpec
	ServiceStatus
	ServiceCreateRequest
	ServiceCreateResponse
	YAML
	OperateRequest
	OperateResponse
*/
package modoki

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OperateKind int32

const (
	OperateKind_Apply  OperateKind = 0
	OperateKind_Remove OperateKind = 1
)

var OperateKind_name = map[int32]string{
	0: "Apply",
	1: "Remove",
}
var OperateKind_value = map[string]int32{
	"Apply":  0,
	"Remove": 1,
}

func (x OperateKind) String() string {
	return proto.EnumName(OperateKind_name, int32(x))
}
func (OperateKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServiceSpec struct {
	Owner       int32             `protobuf:"varint,1,opt,name=owner" json:"owner,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Domain      string            `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	Image       string            `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	Command     []string          `protobuf:"bytes,5,rep,name=command" json:"command,omitempty"`
	Args        []string          `protobuf:"bytes,6,rep,name=args" json:"args,omitempty"`
	Env         map[string]string `protobuf:"bytes,7,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations map[string]string `protobuf:"bytes,10,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels      map[string]string `protobuf:"bytes,11,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ServiceSpec) Reset()                    { *m = ServiceSpec{} }
func (m *ServiceSpec) String() string            { return proto.CompactTextString(m) }
func (*ServiceSpec) ProtoMessage()               {}
func (*ServiceSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServiceSpec) GetOwner() int32 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *ServiceSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceSpec) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ServiceSpec) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ServiceSpec) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *ServiceSpec) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ServiceSpec) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *ServiceSpec) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ServiceSpec) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ServiceStatus struct {
	State      string                     `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	StartedAt  *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=started_at,json=startedAt" json:"started_at,omitempty"`
	ExitCode   int32                      `protobuf:"varint,3,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	CreatedAt  *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt  *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	Attributes map[string]string          `protobuf:"bytes,12,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ServiceStatus) Reset()                    { *m = ServiceStatus{} }
func (m *ServiceStatus) String() string            { return proto.CompactTextString(m) }
func (*ServiceStatus) ProtoMessage()               {}
func (*ServiceStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ServiceStatus) GetStartedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *ServiceStatus) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *ServiceStatus) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ServiceStatus) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ServiceStatus) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ServiceCreateRequest struct {
	Spec *ServiceSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
}

func (m *ServiceCreateRequest) Reset()                    { *m = ServiceCreateRequest{} }
func (m *ServiceCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceCreateRequest) ProtoMessage()               {}
func (*ServiceCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServiceCreateRequest) GetSpec() *ServiceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ServiceCreateResponse struct {
	Id   int32        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Spec *ServiceSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *ServiceCreateResponse) Reset()                    { *m = ServiceCreateResponse{} }
func (m *ServiceCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceCreateResponse) ProtoMessage()               {}
func (*ServiceCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ServiceCreateResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ServiceCreateResponse) GetSpec() *ServiceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type YAML struct {
	Config string `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *YAML) Reset()                    { *m = YAML{} }
func (m *YAML) String() string            { return proto.CompactTextString(m) }
func (*YAML) ProtoMessage()               {}
func (*YAML) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *YAML) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

type OperateRequest struct {
	Kind  OperateKind  `protobuf:"varint,1,opt,name=kind,enum=modoki.OperateKind" json:"kind,omitempty"`
	Owner int32        `protobuf:"varint,2,opt,name=owner" json:"owner,omitempty"`
	Spec  *ServiceSpec `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Yaml  *YAML        `protobuf:"bytes,4,opt,name=yaml" json:"yaml,omitempty"`
}

func (m *OperateRequest) Reset()                    { *m = OperateRequest{} }
func (m *OperateRequest) String() string            { return proto.CompactTextString(m) }
func (*OperateRequest) ProtoMessage()               {}
func (*OperateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OperateRequest) GetKind() OperateKind {
	if m != nil {
		return m.Kind
	}
	return OperateKind_Apply
}

func (m *OperateRequest) GetOwner() int32 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *OperateRequest) GetSpec() *ServiceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *OperateRequest) GetYaml() *YAML {
	if m != nil {
		return m.Yaml
	}
	return nil
}

type OperateResponse struct {
	Yaml *YAML `protobuf:"bytes,1,opt,name=yaml" json:"yaml,omitempty"`
}

func (m *OperateResponse) Reset()                    { *m = OperateResponse{} }
func (m *OperateResponse) String() string            { return proto.CompactTextString(m) }
func (*OperateResponse) ProtoMessage()               {}
func (*OperateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OperateResponse) GetYaml() *YAML {
	if m != nil {
		return m.Yaml
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceSpec)(nil), "modoki.ServiceSpec")
	proto.RegisterType((*ServiceStatus)(nil), "modoki.ServiceStatus")
	proto.RegisterType((*ServiceCreateRequest)(nil), "modoki.ServiceCreateRequest")
	proto.RegisterType((*ServiceCreateResponse)(nil), "modoki.ServiceCreateResponse")
	proto.RegisterType((*YAML)(nil), "modoki.YAML")
	proto.RegisterType((*OperateRequest)(nil), "modoki.OperateRequest")
	proto.RegisterType((*OperateResponse)(nil), "modoki.OperateResponse")
	proto.RegisterEnum("modoki.OperateKind", OperateKind_name, OperateKind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	Create(ctx context.Context, in *ServiceCreateRequest, opts ...grpc.CallOption) (*ServiceCreateResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Create(ctx context.Context, in *ServiceCreateRequest, opts ...grpc.CallOption) (*ServiceCreateResponse, error) {
	out := new(ServiceCreateResponse)
	err := grpc.Invoke(ctx, "/modoki.Service/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	Create(context.Context, *ServiceCreateRequest) (*ServiceCreateResponse, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modoki.Service/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Create(ctx, req.(*ServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "modoki.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Service_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Client API for Generator service

type GeneratorClient interface {
	Operate(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (*OperateResponse, error)
}

type generatorClient struct {
	cc *grpc.ClientConn
}

func NewGeneratorClient(cc *grpc.ClientConn) GeneratorClient {
	return &generatorClient{cc}
}

func (c *generatorClient) Operate(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (*OperateResponse, error) {
	out := new(OperateResponse)
	err := grpc.Invoke(ctx, "/modoki.Generator/Operate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Generator service

type GeneratorServer interface {
	Operate(context.Context, *OperateRequest) (*OperateResponse, error)
}

func RegisterGeneratorServer(s *grpc.Server, srv GeneratorServer) {
	s.RegisterService(&_Generator_serviceDesc, srv)
}

func _Generator_Operate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServer).Operate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modoki.Generator/Operate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServer).Operate(ctx, req.(*OperateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Generator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "modoki.Generator",
	HandlerType: (*GeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Operate",
			Handler:    _Generator_Operate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5f, 0x6f, 0xd3, 0x3e,
	0x14, 0xfd, 0x25, 0x69, 0xd3, 0xe5, 0x66, 0x7f, 0x2a, 0xff, 0xc6, 0x88, 0xca, 0x9f, 0x55, 0xd5,
	0x10, 0x15, 0x0f, 0x99, 0xd4, 0x49, 0xc0, 0x26, 0x01, 0x0a, 0x53, 0xd9, 0x03, 0x43, 0x4c, 0x19,
	0x2f, 0xf0, 0x32, 0xb9, 0x89, 0x57, 0x59, 0x6b, 0xec, 0x10, 0xbb, 0x85, 0x7e, 0x15, 0xbe, 0x28,
	0xe2, 0x0d, 0xc5, 0x76, 0xb6, 0x2e, 0x6c, 0xaa, 0xfa, 0xe6, 0x7b, 0x7d, 0xce, 0xf1, 0xf1, 0xf5,
	0xf5, 0x85, 0x0d, 0x41, 0x8a, 0x19, 0x4d, 0x48, 0x98, 0x17, 0x5c, 0x72, 0xe4, 0x66, 0x3c, 0xe5,
	0x57, 0xb4, 0xb3, 0x3b, 0xe6, 0x7c, 0x3c, 0x21, 0xfb, 0x2a, 0x3b, 0x9a, 0x5e, 0xee, 0x4b, 0x9a,
	0x11, 0x21, 0x71, 0x96, 0x6b, 0x60, 0xef, 0xb7, 0x03, 0xfe, 0xb9, 0xa6, 0x9e, 0xe7, 0x24, 0x41,
	0xdb, 0xd0, 0xe4, 0x3f, 0x18, 0x29, 0x02, 0xab, 0x6b, 0xf5, 0x9b, 0xb1, 0x0e, 0x10, 0x82, 0x06,
	0xc3, 0x19, 0x09, 0xec, 0xae, 0xd5, 0xf7, 0x62, 0xb5, 0x46, 0x3b, 0xe0, 0xa6, 0x3c, 0xc3, 0x94,
	0x05, 0x8e, 0xca, 0x9a, 0xa8, 0x54, 0xa0, 0x19, 0x1e, 0x93, 0xa0, 0xa1, 0xd2, 0x3a, 0x40, 0x01,
	0xb4, 0x12, 0x9e, 0x65, 0x98, 0xa5, 0x41, 0xb3, 0xeb, 0xf4, 0xbd, 0xb8, 0x0a, 0x4b, 0x6d, 0x5c,
	0x8c, 0x45, 0xe0, 0xaa, 0xb4, 0x5a, 0xa3, 0x10, 0x1c, 0xc2, 0x66, 0x41, 0xab, 0xeb, 0xf4, 0xfd,
	0xc1, 0xe3, 0x50, 0x5f, 0x26, 0x5c, 0xf0, 0x19, 0x0e, 0xd9, 0x6c, 0xc8, 0x64, 0x31, 0x8f, 0x4b,
	0x20, 0xfa, 0x00, 0x3e, 0x66, 0x8c, 0x4b, 0x2c, 0x29, 0x67, 0x22, 0x00, 0xc5, 0xdb, 0xbb, 0x8b,
	0x17, 0xdd, 0xc0, 0x34, 0x7f, 0x91, 0x88, 0x5e, 0x81, 0x3b, 0xc1, 0x23, 0x32, 0x11, 0x81, 0xaf,
	0x24, 0x76, 0xef, 0x92, 0x38, 0x55, 0x08, 0xcd, 0x36, 0xf0, 0xce, 0x4b, 0x58, 0xab, 0x1c, 0xa1,
	0x36, 0x38, 0x57, 0x64, 0xae, 0x0a, 0xe8, 0xc5, 0xe5, 0xb2, 0x2c, 0xc9, 0x0c, 0x4f, 0xa6, 0x55,
	0xfd, 0x74, 0x70, 0x64, 0xbf, 0xb6, 0x3a, 0x6f, 0xa1, 0x5d, 0x77, 0xb4, 0x12, 0xff, 0x10, 0xfc,
	0x05, 0x3b, 0xab, 0x50, 0x7b, 0x7f, 0x6c, 0xd8, 0xa8, 0xae, 0x25, 0xb1, 0x9c, 0x8a, 0x12, 0x2b,
	0x24, 0x96, 0xc4, 0xf0, 0x75, 0x80, 0x0e, 0x01, 0x84, 0xc4, 0x85, 0x24, 0xe9, 0x05, 0x96, 0x4a,
	0xc6, 0x1f, 0x74, 0x42, 0xdd, 0x57, 0x61, 0xd5, 0x57, 0xe1, 0x97, 0xaa, 0xaf, 0x62, 0xcf, 0xa0,
	0x23, 0x89, 0x1e, 0x81, 0x47, 0x7e, 0x52, 0x79, 0x91, 0xf0, 0x94, 0xa8, 0x2e, 0x69, 0xc6, 0x6b,
	0x65, 0xe2, 0x98, 0xa7, 0x4a, 0x37, 0x29, 0x08, 0x36, 0xba, 0xb0, 0x5c, 0xd7, 0xa0, 0x23, 0x59,
	0x52, 0xa7, 0x79, 0x5a, 0x51, 0xfd, 0xe5, 0x54, 0x83, 0x8e, 0x24, 0x1a, 0x02, 0x60, 0x29, 0x0b,
	0x3a, 0x9a, 0x4a, 0x22, 0x82, 0x75, 0xf5, 0xca, 0xcf, 0xea, 0xaf, 0xac, 0xca, 0x11, 0x46, 0xd7,
	0x38, 0xfd, 0xd6, 0x0b, 0xc4, 0xce, 0x1b, 0xd8, 0xaa, 0x6d, 0xaf, 0x54, 0xfb, 0x77, 0xb0, 0x6d,
	0xce, 0x3a, 0x56, 0x97, 0x8a, 0xc9, 0xf7, 0x29, 0x11, 0x12, 0x3d, 0x87, 0x86, 0xc8, 0x49, 0xa2,
	0x44, 0xfc, 0xc1, 0xff, 0x77, 0x74, 0x5f, 0xac, 0x00, 0xbd, 0x33, 0x78, 0x50, 0x13, 0x10, 0x39,
	0x67, 0x82, 0xa0, 0x4d, 0xb0, 0x69, 0x6a, 0x3e, 0xaf, 0x4d, 0xd3, 0x6b, 0x45, 0x7b, 0x99, 0xe2,
	0x53, 0x68, 0x7c, 0x8d, 0x3e, 0x9d, 0x96, 0xdf, 0x3a, 0xe1, 0xec, 0x92, 0x8e, 0xcd, 0x4d, 0x4c,
	0xd4, 0xfb, 0x65, 0xc1, 0xe6, 0xe7, 0x9c, 0x14, 0xb7, 0xdd, 0x5e, 0x51, 0xa6, 0x4f, 0xdb, 0xbc,
	0xd1, 0x36, 0xa8, 0x8f, 0x94, 0xa5, 0xb1, 0x02, 0xdc, 0x0c, 0x15, 0x7b, 0x71, 0xa8, 0x54, 0xd6,
	0x9c, 0x25, 0xd6, 0x50, 0x17, 0x1a, 0x73, 0x9c, 0x4d, 0xd4, 0x40, 0xf1, 0x07, 0xeb, 0x15, 0xb0,
	0xb4, 0x1b, 0xab, 0x9d, 0xde, 0x01, 0x6c, 0x5d, 0x7b, 0x33, 0x85, 0xa8, 0x48, 0xd6, 0x7d, 0xa4,
	0x17, 0x7b, 0xe0, 0x2f, 0x58, 0x45, 0x1e, 0x34, 0xa3, 0x3c, 0x9f, 0xcc, 0xdb, 0xff, 0x21, 0x00,
	0x37, 0x26, 0x19, 0x9f, 0x91, 0xb6, 0x35, 0x38, 0x83, 0x96, 0x71, 0x84, 0x86, 0xe0, 0xea, 0x6a,
	0xa3, 0xfa, 0x48, 0xba, 0xf5, 0x8a, 0x9d, 0x27, 0xf7, 0xec, 0x6a, 0x67, 0x83, 0x13, 0xf0, 0x4e,
	0x08, 0x2b, 0x0f, 0xe6, 0x05, 0x3a, 0x82, 0x96, 0x31, 0x81, 0x76, 0x6a, 0x05, 0xac, 0xe4, 0x1e,
	0xfe, 0x93, 0xd7, 0x42, 0xef, 0xd7, 0xbe, 0x99, 0x31, 0x3f, 0x72, 0x55, 0xd3, 0x1f, 0xfc, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x22, 0xb7, 0xa2, 0x34, 0x06, 0x06, 0x00, 0x00,
}
